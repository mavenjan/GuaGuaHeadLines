package com.nxt.maven.guaguaheadlines.home;import android.os.Bundle;import android.support.design.widget.CoordinatorLayout;import android.support.v4.view.ViewPager;import android.support.v7.appcompat.BuildConfig;import android.text.TextUtils;import android.util.Log;import android.view.KeyEvent;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import com.nxt.maven.guaguaheadlines.R;import com.nxt.maven.guaguaheadlines.app.Constant;import com.nxt.maven.guaguaheadlines.base.BaseFragment;import com.nxt.maven.guaguaheadlines.base.BasePresenter;import com.nxt.maven.guaguaheadlines.home.adapter.ChannelAdapter;import com.nxt.maven.guaguaheadlines.home.behavior.uc.UcNewsHeaderPagerBehavior;import com.nxt.maven.guaguaheadlines.model.entity.Channel;import com.nxt.maven.guaguaheadlines.utils.PreUtils;import com.nxt.maven.guaguaheadlines.utils.UIUtils;import com.socks.library.KLog;import java.util.ArrayList;import java.util.List;import butterknife.BindView;import butterknife.OnClick;import fm.jiecao.jcvideoplayer_lib.JCVideoPlayer;import me.weyye.library.colortrackview.ColorTrackTabLayout;/** * Created by Jan Maven on 2017/8/14. * Email:cyjiang_11@163.com * Description: 主页 */public class HomeFragment extends BaseFragment {    private static final String TAG = "HomeFragment";    @BindView(R.id.tab_channel)    ColorTrackTabLayout mTabChannel;    @BindView(R.id.iv_operation)    ImageView ivAddChannel;    @BindView(R.id.vp_content)    ViewPager mVpContent;    private List<Channel> mSelectedChannels = new ArrayList<>();    private List<Channel> mUnSelectedChannels = new ArrayList<>();    private List<NewsListFragment> mChannelFragments = new ArrayList<>();    private Gson mGson = new Gson();    @Override    protected BasePresenter createPresenter() {        return null;    }    @Override    protected int provideContentViewId() {        return R.layout.fragment_home;    }    @Override    public void initData() {        initChannelData();        initChannelFragments();    }    /**     * 初始化已选频道和未选频道的数据     */    private void initChannelData() {        String selectedChannelJson = PreUtils.getString(Constant.SELECTED_CHANNEL_JSON, "");        String unselectChannel = PreUtils.getString(Constant.UNSELECTED_CHANNEL_JSON, "");        if (TextUtils.isEmpty(selectedChannelJson) || TextUtils.isEmpty(unselectChannel)) {            //本地没有title            String[] channels = getResources().getStringArray(R.array.channel);            String[] channelCodes = getResources().getStringArray(R.array.channel_code);            //默认添加了全部频道            for (int i = 0; i < channelCodes.length; i++) {                String title = channels[i];                String code = channelCodes[i];                mSelectedChannels.add(new Channel(title, code));            }            selectedChannelJson = mGson.toJson(mSelectedChannels);//将集合转换成json字符串            KLog.i("selectedChannelJson:" + selectedChannelJson);            PreUtils.putString(Constant.SELECTED_CHANNEL_JSON, selectedChannelJson);//保存到sp        } else {            //之前添加过            List<Channel> selectedChannel = mGson.fromJson(selectedChannelJson, new TypeToken<List<Channel>>() {            }.getType());            List<Channel> unselectedChannel = mGson.fromJson(unselectChannel, new TypeToken<List<Channel>>() {            }.getType());            mSelectedChannels.addAll(selectedChannel);            mUnSelectedChannels.addAll(unselectedChannel);        }    }    /**     * 初始化已选频道的fragment的集合     */    private void initChannelFragments() {        KLog.e("initChannelFragments");        String[] channelCodes = getResources().getStringArray(R.array.channel_code);        for (Channel channel : mSelectedChannels) {            NewsListFragment newsFragment = new NewsListFragment();            Bundle bundle = new Bundle();            bundle.putString(Constant.CHANNEL_CODE, channel.channelCode);            bundle.putBoolean(Constant.IS_VIDEO_LIST, channel.channelCode.equals(channelCodes[1]));//是否是视频列表页面,根据判断频道号是否是视频            newsFragment.setArguments(bundle);            mChannelFragments.add(newsFragment);//添加到集合中        }    }    @Override    public void initListener() {        ChannelAdapter channelAdapter = new ChannelAdapter(mChannelFragments, mSelectedChannels, getChildFragmentManager());        mVpContent.setAdapter(channelAdapter);        mVpContent.setOffscreenPageLimit(mSelectedChannels.size());        mTabChannel.setTabPaddingLeftAndRight(UIUtils.dip2Px(10), UIUtils.dip2Px(10));        mTabChannel.setupWithViewPager(mVpContent);        mTabChannel.post(new Runnable() {            @Override            public void run() {                //设置最小宽度，使其可以在滑动一部分距离                ViewGroup slidingTabStrip = (ViewGroup) mTabChannel.getChildAt(0);                slidingTabStrip.setMinimumWidth(slidingTabStrip.getMeasuredWidth() + ivAddChannel.getMeasuredWidth());            }        });        //隐藏指示器        mTabChannel.setSelectedTabIndicatorHeight(0);        mVpContent.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {            @Override            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {            }            @Override            public void onPageSelected(int position) {                //当页签切换的时候，如果有播放视频，则释放资源                JCVideoPlayer.releaseAllVideos();            }            @Override            public void onPageScrollStateChanged(int state) {            }        });    }    @Override    public void loadData() {    }    public String getCurrentChannelCode() {        int currentItem = mVpContent.getCurrentItem();        return mSelectedChannels.get(currentItem).channelCode;    }    @OnClick({R.id.tv_search, R.id.iv_operation})    public void onClick(View view) {        switch (view.getId()) {            case R.id.tv_search:                break;            case R.id.iv_operation:                break;        }    }}