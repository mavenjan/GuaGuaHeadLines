package com.nxt.maven.guaguaheadlines.home;import android.content.DialogInterface;import android.content.Intent;import android.net.Uri;import android.os.Bundle;import android.support.design.widget.CoordinatorLayout;import android.support.design.widget.NavigationView;import android.support.design.widget.TabLayout;import android.support.v4.app.FragmentManager;import android.support.v4.content.ContextCompat;import android.support.v4.view.ViewPager;import android.support.v4.widget.DrawerLayout;import android.support.v7.appcompat.BuildConfig;import android.text.TextUtils;import android.util.Log;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.Toast;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import com.nxt.maven.guaguaheadlines.R;import com.nxt.maven.guaguaheadlines.app.Constant;import com.nxt.maven.guaguaheadlines.base.MBaseActivity;import com.nxt.maven.guaguaheadlines.app.MyApplication;import com.nxt.maven.guaguaheadlines.base.BasePresenter;import com.nxt.maven.guaguaheadlines.home.adapter.ChannelPagerAdapter;import com.nxt.maven.guaguaheadlines.home.behavior.uc.UcNewsHeaderPagerBehavior;import com.nxt.maven.guaguaheadlines.home.view.ChannelDialogFragment;import com.nxt.maven.guaguaheadlines.listener.OnChannelListener;import com.nxt.maven.guaguaheadlines.model.entity.Channel;import com.nxt.maven.guaguaheadlines.model.event.TabRefreshCompletedEvent;import com.nxt.maven.guaguaheadlines.utils.PreUtils;import com.nxt.maven.guaguaheadlines.utils.SharePrefHelper;import com.nxt.maven.guaguaheadlines.utils.UIUtils;import com.socks.library.KLog;import org.greenrobot.eventbus.Subscribe;import org.greenrobot.eventbus.ThreadMode;import org.zackratos.ultimatebar.UltimateBar;import java.util.ArrayList;import java.util.List;import butterknife.BindView;import butterknife.OnClick;import fm.jiecao.jcvideoplayer_lib.JCVideoPlayer;import me.weyye.library.colortrackview.ColorTrackTabLayout;/** * Created by Jan Maven on 2017/7/17. * Email:cyjiang_11@163.com * Description: */public class MainActivity extends MBaseActivity implements        UcNewsHeaderPagerBehavior.OnPagerStateListener, TabLayout.OnTabSelectedListener, OnChannelListener {    private static final String TAG = "MainActivity";    @BindView(R.id.tab_channel)    ColorTrackTabLayout mTabChannel;    @BindView(R.id.iv_operation)    ImageView ivAddChannel;    @BindView(R.id.vp_content)    ViewPager mVpContent;    private List<Channel> mSelectedChannels = new ArrayList<>();    private List<Channel> mUnSelectedChannels = new ArrayList<>();    //    private List<NewsListFragment> mChannelFragments = new ArrayList<>();    private List<NewsListFragment> mFragments = new ArrayList<>();    private UcNewsHeaderPagerBehavior mPagerBehavior;    private DrawerLayout mDrawerLayout;    private NavigationView mNavigationView;    private Gson mGson = new Gson();    private ChannelPagerAdapter mChannelPagerAdapter;    @Override    public void initView() {        UltimateBar ultimateBar = new UltimateBar(this);        ultimateBar.setColorBarForDrawer(ContextCompat.getColor(this, R.color.colorPrimary), 10);        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);        mNavigationView = (NavigationView) findViewById(R.id.navigation_view);        setupDrawerContent(mNavigationView);        findViewById(R.id.iv_github).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                openMyGitHub();            }        });        mPagerBehavior = (UcNewsHeaderPagerBehavior) ((CoordinatorLayout.LayoutParams) findViewById(R.id.id_uc_news_header_pager).getLayoutParams()).getBehavior();        mPagerBehavior.setPagerStateListener(this);        initChannelData();        initChannelFragments();        initListener();//        mTabChannel.setTabMode(TabLayout.MODE_FIXED);//        mTabChannel.setOnTabSelectedListener(this);//        mVpContent.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(mTabChannel));//        mVpContent.setAdapter(new TestFragmentAdapter(mFragments, getSupportFragmentManager()));    }    /**     * 初始化已选频道和未选频道的数据     */    private void initChannelData() {        String selectedChannelJson = PreUtils.getString(Constant.SELECTED_CHANNEL_JSON, "");        String unselectChannel = PreUtils.getString(Constant.UNSELECTED_CHANNEL_JSON, "");        Log.e(TAG, "initChannelData:selectedChannelJson--------->" + selectedChannelJson);        Log.e(TAG, "initChannelData:unselectChannel--------->" + unselectChannel);        if (TextUtils.isEmpty(selectedChannelJson) || TextUtils.isEmpty(unselectChannel)) {            //本地没有title            String[] channels = getResources().getStringArray(R.array.channel);            String[] channelCodes = getResources().getStringArray(R.array.channel_code);            //默认添加了全部频道            for (int i = 0; i < channelCodes.length; i++) {                String title = channels[i];                String code = channelCodes[i];                mSelectedChannels.add(new Channel(title, code));            }            selectedChannelJson = mGson.toJson(mSelectedChannels);//将集合转换成json字符串            KLog.i("selectedChannelJson:" + selectedChannelJson);            SharePrefHelper.put(Constant.SELECTED_CHANNEL_JSON, selectedChannelJson);//保存到sp        } else {            //之前添加过            List<Channel> selectedChannel = mGson.fromJson(selectedChannelJson, new TypeToken<List<Channel>>() {            }.getType());            List<Channel> unselectedChannel = mGson.fromJson(unselectChannel, new TypeToken<List<Channel>>() {            }.getType());            mSelectedChannels.addAll(selectedChannel);            mUnSelectedChannels.addAll(unselectedChannel);        }    }    /**     * 初始化已选频道的fragment的集合     */    private void initChannelFragments() {        KLog.e("initChannelFragments");        String[] channelCodes = getResources().getStringArray(R.array.channel_code);        for (Channel channel : mSelectedChannels) {            NewsListFragment newsFragment = new NewsListFragment();            Bundle bundle = new Bundle();            bundle.putString(Constant.CHANNEL_CODE, channel.channelCode);            bundle.putBoolean(Constant.IS_VIDEO_LIST, channel.channelCode.equals(channelCodes[1]));//是否是视频列表页面,根据判断频道号是否是视频            newsFragment.setArguments(bundle);            mFragments.add(newsFragment);//添加到集合中        }    }    public void initListener() {        mChannelPagerAdapter = new ChannelPagerAdapter(mFragments, mSelectedChannels, getSupportFragmentManager());        mVpContent.setAdapter(mChannelPagerAdapter);        mVpContent.setOffscreenPageLimit(mSelectedChannels.size());        mTabChannel.setTabPaddingLeftAndRight(UIUtils.dip2Px(10), UIUtils.dip2Px(10));        mTabChannel.setupWithViewPager(mVpContent);        mTabChannel.post(new Runnable() {            @Override            public void run() {                //设置最小宽度，使其可以在滑动一部分距离                ViewGroup slidingTabStrip = (ViewGroup) mTabChannel.getChildAt(0);                slidingTabStrip.setMinimumWidth(slidingTabStrip.getMeasuredWidth() + ivAddChannel.getMeasuredWidth());            }        });        //隐藏指示器        mTabChannel.setSelectedTabIndicatorHeight(0);        mVpContent.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {            @Override            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {            }            @Override            public void onPageSelected(int position) {                //当页签切换的时候，如果有播放视频，则释放资源                JCVideoPlayer.releaseAllVideos();            }            @Override            public void onPageScrollStateChanged(int state) {            }        });    }    @OnClick({R.id.iv_github, R.id.iv_operation})    public void onClick(View view) {        switch (view.getId()) {            case R.id.iv_operation:                FragmentManager fragmentManager = getSupportFragmentManager();                ChannelDialogFragment dialogFragment = ChannelDialogFragment.newInstance(mSelectedChannels, mUnSelectedChannels);                Log.e(TAG, "onClick: mSelectedChannels----------->" + mSelectedChannels);                Log.e(TAG, "onClick: mUnSelectedChannels----------->" + mUnSelectedChannels);                dialogFragment.setOnChannelListener(this);                dialogFragment.show(fragmentManager,"CHANNEL");//                dialogFragment.show(getSupportFragmentManager(), "CHANNEL");                dialogFragment.setOnDismissListener(new DialogInterface.OnDismissListener() {                    @Override                    public void onDismiss(DialogInterface dialog) {                        mChannelPagerAdapter.notifyDataSetChanged();                        mVpContent.setOffscreenPageLimit(mSelectedChannels.size());                        mTabChannel.setCurrentItem(mTabChannel.getSelectedTabPosition());                        ViewGroup slidingTabStrip = (ViewGroup) mTabChannel.getChildAt(0);                        //注意：因为最开始设置了最小宽度，所以重新测量宽度的时候一定要先将最小宽度设置为0                        slidingTabStrip.setMinimumWidth(0);                        slidingTabStrip.measure(0, 0);                        slidingTabStrip.setMinimumWidth(slidingTabStrip.getMeasuredWidth() + ivAddChannel.getMeasuredWidth());                        //保存选中和未选中的channel                        SharePrefHelper.put(Constant.SELECTED_CHANNEL_JSON, mGson.toJson(mSelectedChannels));                        SharePrefHelper.put(Constant.UNSELECTED_CHANNEL_JSON, mGson.toJson(mUnSelectedChannels));                    }                });//                startActivity(new Intent(MainActivity.this,ChannelActivity.class));                break;        }    }    private void listMove(List datas, int starPos, int endPos) {        Object o = datas.get(starPos);        //先删除之前的位置        datas.remove(starPos);        //添加到现在的位置        datas.add(endPos, o);    }    @Override    public void onItemMove(int starPos, int endPos) {        listMove(mSelectedChannels, starPos, endPos);        listMove(mFragments, starPos, endPos);    }    @Override    public void onMoveToMyChannel(int starPos, int endPos) {        //移动到我的频道        Channel channel = mUnSelectedChannels.remove(starPos);        mSelectedChannels.add(endPos, channel);//        mFragments.add(NewsListFragment.newInstance(channel.TitleCode));    }    @Override    public void onMoveToOtherChannel(int starPos, int endPos) {        //移动到推荐频道        mUnSelectedChannels.add(endPos, mSelectedChannels.remove(starPos));        mFragments.remove(starPos);    }    @Override    protected BasePresenter createPresenter() {        return null;    }    @Override    protected int provideContentViewId() {        return R.layout.activity_main;    }    @Override    public boolean enableSlideClose() {        return false;    }    private void openMyGitHub() {        Uri uri = Uri.parse("https://github.com/BCsl");        Intent it = new Intent(Intent.ACTION_VIEW, uri);        startActivity(it);    }    private void setupDrawerContent(NavigationView navigationView) {        navigationView.setNavigationItemSelectedListener(                new NavigationView.OnNavigationItemSelectedListener() {                    @Override                    public boolean onNavigationItemSelected(MenuItem menuItem) {//                        mMainPresenter.switchNavigation(menuItem.getItemId());//                        menuItem.setChecked(true);                        mDrawerLayout.closeDrawers();                        return true;                    }                });    }    @Override    public void onPagerClosed() {        if (BuildConfig.DEBUG) {            Log.d(TAG, "onPagerClosed: ");        }//        Snackbar.make(mNewsPager, "pager closed", Snackbar.LENGTH_SHORT).show();    }    @Override    public void onPagerOpened() {//        Snackbar.make(mNewsPager, "pager opened", Snackbar.LENGTH_SHORT).show();    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onRefreshCompletedEvent(TabRefreshCompletedEvent event) {    }    @Override    protected void onStart() {        super.onStart();        registerEventBus(MainActivity.this);    }    @Override    protected void onStop() {        super.onStop();        unregisterEventBus(MainActivity.this);    }    @Override    protected void onPause() {        super.onPause();        JCVideoPlayer.releaseAllVideos();    }    @Override    public void onTabSelected(TabLayout.Tab tab) {        mVpContent.setCurrentItem(tab.getPosition());    }    @Override    public void onTabUnselected(TabLayout.Tab tab) {    }    @Override    public void onTabReselected(TabLayout.Tab tab) {    }    private long exitTime;    @Override    public void onBackPressed() {        if (JCVideoPlayer.backPress()) {            return;        }        if (mDrawerLayout.isDrawerOpen(mNavigationView)) {            mDrawerLayout.closeDrawers();        } else {            if (mPagerBehavior != null && mPagerBehavior.isClosed()) {                mPagerBehavior.openPager();            } else {                if ((System.currentTimeMillis() - exitTime) > 2000) {                    Toast.makeText(getApplicationContext(), getString(R.string.exit_notice),                            Toast.LENGTH_SHORT).show();                    exitTime = System.currentTimeMillis();                } else {                    MyApplication.getAppContext().exit();                    finish();                }//            super.onBackPressed();            }        }    }}