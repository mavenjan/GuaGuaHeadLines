package com.cauc.mavenj.utils;import android.content.Context;import android.content.Intent;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.net.wifi.ScanResult;import android.net.wifi.WifiInfo;import android.net.wifi.WifiManager;import android.provider.Settings;import java.util.List;/** * Created by Jan Maven on 2017/8/14. * Email:cyjiang_11@163.com * Description: 网络的工具类 */public class NetWorkUtils {    public static boolean isNetworkAvailable(Context context) {        if(context !=null){            ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);            NetworkInfo info = cm.getActiveNetworkInfo();            if(info !=null){                return info.isAvailable();            }        }        return false;    }    /**     * 判断当前网络是否是wifi网络     *     * @return true：是wifi连接 false：不是wifi连接     */    public static boolean isWifiConnection(Context context) {        ConnectivityManager connectivityManager = (ConnectivityManager) context                .getSystemService(Context.CONNECTIVITY_SERVICE);        NetworkInfo activeNetInfo = connectivityManager.getActiveNetworkInfo();        return activeNetInfo != null                && activeNetInfo.getType() == ConnectivityManager.TYPE_WIFI;    }    /**     * 描述：得到所有的WiFi列表.     * 此方法需要如下两个权限     */    public static List<ScanResult> getScanResults(Context context) {        WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);        List<ScanResult> list = null;        //开始扫描WiFi        boolean f = wifiManager.startScan();        if (!f) {            getScanResults(context);        } else {            // 得到扫描结果            list = wifiManager.getScanResults();        }        return list;    }    /**     * 描述：获取连接的WIFI信息.     * 此方法需要如下权限     */    public static WifiInfo getConnectionInfo(Context context) {        WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);        return wifiManager.getConnectionInfo();    }    /**     * 判断当前网络是否是移动数据网络.     *     * @param context the context     * @return boolean     */    public static boolean isMobileConnection(Context context) {        ConnectivityManager connectivityManager = (ConnectivityManager) context                .getSystemService(Context.CONNECTIVITY_SERVICE);        NetworkInfo activeNetInfo = connectivityManager.getActiveNetworkInfo();        return activeNetInfo != null                && activeNetInfo.getType() == ConnectivityManager.TYPE_MOBILE;    }    /**     * 打开网络设置界面     */    public static void openSettingNetActivity(Context context) {        Intent intent = new Intent(Settings.ACTION_WIRELESS_SETTINGS);        context.startActivity(intent);    }}